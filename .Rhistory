battery_cost_function(scenario_1,2020)
battery_cost_function(scenario_1,2021)
battery_cost_function(scenario_1,2021)
battery_cost_function(scenario_1,2020)
battery_cost_function(scenario_1,2015)
battery_cost_function <- function(sD,yeartime,nlag = 4.5, cost_cap = 300){
#cost of EV vs cost
#2020 premium
alpha<- dplyr::filter(sD,parameter=="learning_exponent")$value
bnefprices_cap <- bnefprices %>% dplyr::rowwise() %>% mutate(pack_ekWh = replace(pack_ekWh, pack_ekWh > cost_cap,cost_cap*(1+0.1)^(yeartime-year)))
b1 <-dplyr::filter(sD,parameter=="cost_floor")$value
b0 <- dplyr::filter(bnefprices, year==2020)$pack_ekWh-b1
if(yeartime <= 2020.5 + nlag) return(stats::approx(x=bnefprices_cap$year+0.5,y=bnefprices_cap$pack_ekWh, xout=yeartime-nlag)$y)
#build learning curve from
if(yeartime >= 2020.5 + nlag) return(max(b1,b0*exp(-alpha*(yeartime-(2020.5+nlag))) + b1 ))
}
battery_cost_function(scenario_1,2015)
battery_cost_function(scenario_1,2021)
battery_cost_function <- function(sD,yeartime,nlag = 4.5, cost_cap = 300){
#cost of EV vs cost
#2020 premium
alpha<- dplyr::filter(sD,parameter=="learning_exponent")$value
bnefprices_cap <- bnefprices %>% dplyr::rowwise() %>% mutate(pack_ekWh = replace(pack_ekWh, year < 2021,264.7*(1+0.1)^(yeartime-year)))
b1 <-dplyr::filter(sD,parameter=="cost_floor")$value
b0 <- dplyr::filter(bnefprices, year==2020)$pack_ekWh-b1
if(yeartime <= 2020.5 + nlag) return(stats::approx(x=bnefprices_cap$year+0.5,y=bnefprices_cap$pack_ekWh, xout=yeartime-nlag)$y)
#build learning curve from
if(yeartime >= 2020.5 + nlag) return(max(b1,b0*exp(-alpha*(yeartime-(2020.5+nlag))) + b1 ))
}
battery_cost_function(scenario_1,2021)
battery_cost_function <- function(sD,yeartime,nlag = 4.5, cost_cap = 300){
#cost of EV vs cost
#2020 premium
alpha<- dplyr::filter(sD,parameter=="learning_exponent")$value
bnefprices_cap <- bnefprices %>% dplyr::rowwise() %>% mutate(pack_ekWh = replace(pack_ekWh, pack_ekWh > 264,264*(1+0.1)^(yeartime-year)))
b1 <-dplyr::filter(sD,parameter=="cost_floor")$value
b0 <- dplyr::filter(bnefprices, year==2020)$pack_ekWh-b1
if(yeartime <= 2020.5 + nlag) return(stats::approx(x=bnefprices_cap$year+0.5,y=bnefprices_cap$pack_ekWh, xout=yeartime-nlag)$y)
#build learning curve from
if(yeartime >= 2020.5 + nlag) return(max(b1,b0*exp(-alpha*(yeartime-(2020.5+nlag))) + b1 ))
}
battery_cost_function(scenario_1,2021)
bnefprices
bnefprices1 <- bnefprices %>% mutate(year=year+4.5)
bnefprices1
bnefprices1 <- bnefprices %>% mutate(year=year+4)
bnefprices1
fleet1
lm(tech_cost_2021~kWh,fleet1 %>% filter(segment=="C",type=="bev"))
fleet1 <- fleet %>% filter(!is.na(comment) & comment != "synthetic")
fleet1
fleet1 %>% dim()
fleet1 <- fleet %>% filter(!is.na(comment) & comment != "synthetic")
fleet1 %>% dim()
fleet1 <- fleet %>% filter(comment != "synthetic")
fleet1 %>% dim()
fleet1 <- fleet %>% filter(!is.na(comment) & comment != "synthetic")
fleet1 <- fleet %>% filter(comment != "synthetic")
fleet1 <- fleet %>% filter(is.na(comment) | comment != "synthetic")
fleet1 %>% dim()
lm(tech_cost_2021~kWh,fleet1 %>% filter(segment=="C",type=="bev"))
lm(tech_cost_2021~kWh,fleet1 %>% filter(segment=="C-J",type=="bev"))
bnefprices
dplyr::filter(bnefprices, year==2020)$pack_ekWh
battery_cost_function <- function(sD,yeartime,nlag = 4.5, cost_cap = 300){
#battery pack price model tuned to Kona and Leaf prices
#2020 premium
alpha<- dplyr::filter(sD,parameter=="learning_exponent")$value
b1 <-dplyr::filter(sD,parameter=="cost_floor")$value
b0 <- dplyr::filter(bnefprices, year==2020)$pack_ekWh-b1
#build learning curve from
if(yeartime >= 2020.5 + nlag) return(max(b1,b0*exp(-alpha*(yeartime-(2020.5+nlag))) + b1 ))
if(yeartime <= 2020.5 + nlag & yeartime >= 2021) return(stats::approx(x=bnefprices$year+0.5,y=bnefprices_cap$pack_ekWh, xout=yeartime-nlag)$y)
if(yeartime < 2021) return( 264*(1+0.1)^(yeartime-2021))
}
plot(sapply(2015:2050, function(y) battery_cost_function(scenario_1,y)))
battery_cost_function <- function(sD,yeartime,nlag = 4.5, cost_cap = 300){
#battery pack price model tuned to Kona and Leaf prices
#2020 premium
alpha<- dplyr::filter(sD,parameter=="learning_exponent")$value
b1 <-dplyr::filter(sD,parameter=="cost_floor")$value
b0 <- dplyr::filter(bnefprices, year==2020)$pack_ekWh-b1
#build learning curve from
if(yeartime >= 2020.5 + nlag) return(max(b1,b0*exp(-alpha*(yeartime-(2020.5+nlag))) + b1 ))
if(yeartime <= 2020.5 + nlag & yeartime >= 2021) return(stats::approx(x=bnefprices$year+0.5,y=bnefprices$pack_ekWh, xout=yeartime-nlag)$y)
if(yeartime < 2021) return( 264*(1+0.1)^(yeartime-2021))
}
plot(sapply(2015:2050, function(y) battery_cost_function(scenario_1,y)))
battery_cost_function <- function(sD,yeartime,nlag = 4.5, cost_cap = 300){
#battery pack price model tuned to Kona and Leaf prices
#2020 premium
alpha<- dplyr::filter(sD,parameter=="learning_exponent")$value
b1 <-dplyr::filter(sD,parameter=="cost_floor")$value
b0 <- dplyr::filter(bnefprices, year==2020)$pack_ekWh-b1
#build learning curve from
if(yeartime >= 2020.5 + nlag) return(max(b1,b0*exp(-alpha*(yeartime-(2020.5+nlag))) + b1 ))
if(yeartime <= 2020.5 + nlag & yeartime >= 2021) return(stats::approx(x=bnefprices$year+0.5,y=bnefprices$pack_ekWh, xout=yeartime-nlag)$y)
if(yeartime < 2021) return( 264*(1+0.1)^(2021-yeartime))
}
plot(sapply(2015:2050, function(y) battery_cost_function(scenario_1,y)))
plot(sapply(seq(2015,2050,by=0.1), function(y) battery_cost_function(scenario_1,y)))
plot (seq(2015,2050,by=0.1)sapply(seq(2015,2050,by=0.1), function(y) battery_cost_function(scenario_1,y)))
plot (seq(2015,2050,by=0.1),sapply(seq(2015,2050,by=0.1), function(y) battery_cost_function(scenario_1,y)))
load_all()
rm(list = c("battery_cost_function"))
load_all()
get_current_tech(scenario_1,2021) %>% filter(model=="Kona")
load_all()
get_current_tech(scenario_1,2021) %>% filter(model=="Kona")
get_current_tech(scenario_1,2019) %>% filter(model=="Kona")
get_current_tech(scenario_1,2018) %>% filter(model=="Kona")
load_all()
load_all()
get_current_tech(scenario_1,2018) %>% filter(model=="Kona")
get_current_tech(scenario_1,2019) %>% filter(model=="Kona")
get_current_tech(scenario_1,2018) %>% filter(model=="Kona")
get_current_tech(scenario_1,2018) %>% filter(model=="Leaf")
get_current_tech(scenario_1,2015) %>% filter(model=="Leaf")
battery_cost_function <- function(sD,yeartime,nlag = 4.5, cost_cap = 300){
#battery pack price model tuned to Kona and Leaf prices
#2020 premium
alpha<- dplyr::filter(sD,parameter=="learning_exponent")$value
b1 <-dplyr::filter(sD,parameter=="cost_floor")$value
b0 <- dplyr::filter(bnefprices, year==2020)$pack_ekWh-b1
#build learning curve from
if(yeartime >= 2020.5 + nlag) return(max(b1,b0*exp(-alpha*(yeartime-(2020.5+nlag))) + b1 ))
if(yeartime <= 2020.5 + nlag & yeartime >= 2021) return(stats::approx(x=bnefprices$year+0.5,y=bnefprices$pack_ekWh, xout=yeartime-nlag)$y)
if(yeartime < 2021) return( 264*(1+0.0)^(2021-yeartime))
}
load_all()
rm(list = c("battery_cost_function"))
load_all()
load_all()
get_current_tech(scenario_1,2015) %>% filter(model=="Leaf")
get_current_tech(scenario_1,2018) %>% filter(model=="Kona")
get_current_tech(scenario_1,2019) %>% filter(model=="Kona")
battery_cost_function(sD,2021)
battery_cost_function(sD,2022)
battery_cost_function(sD,2023)
battery_cost_function(sD,2024)
battery_cost_function(sD,2020)
battery_cost_function(sD,2019)
battery_cost_function <- function(sD,yeartime,nlag = 4.5){
#battery pack price model tuned to Kona and Leaf prices
#2020 premium
alpha<- dplyr::filter(sD,parameter=="learning_exponent")$value
b1 <-dplyr::filter(sD,parameter=="cost_floor")$value
b0 <- dplyr::filter(bnefprices, year==2020)$pack_ekWh-b1
#build learning curve from
if(yeartime >= 2020.5 + nlag) return(max(b1,b0*exp(-alpha*(yeartime-(2020.5+nlag))) + b1 ))
if(yeartime <= 2020.5 + nlag & yeartime >= 2021) return(stats::approx(x=bnefprices$year+0.5,y=bnefprices$pack_ekWh, xout=yeartime-nlag)$y)
if(yeartime < 2021) return( 264.7*(1+0.5)^(2021-yeartime))
}
battery_cost_function(sD,2019)
battery_cost_function(sD,2020)
battery_cost_function <- function(sD,yeartime,nlag = 4.5){
#battery pack price model tuned to Kona and Leaf prices
#2020 premium
alpha<- dplyr::filter(sD,parameter=="learning_exponent")$value
b1 <-dplyr::filter(sD,parameter=="cost_floor")$value
b0 <- dplyr::filter(bnefprices, year==2020)$pack_ekWh-b1
#build learning curve from
if(yeartime >= 2020.5 + nlag) return(max(b1,b0*exp(-alpha*(yeartime-(2020.5+nlag))) + b1 ))
if(yeartime <= 2020.5 + nlag & yeartime >= 2021) return(stats::approx(x=bnefprices$year+0.5,y=bnefprices$pack_ekWh, xout=yeartime-nlag)$y)
if(yeartime < 2021) return( 264.7*(1+0.05)^(2021-yeartime))
}
battery_cost_function(sD,2020)
battery_cost_function(sD,2019)
battery_cost_function(sD,2020)
battery_cost_function(sD,2018)
get_current_tech(sD,2018) %>% filter(model=="Kona")
get_current_tech(sD,2015) %>% filter(model=="Leaf")
battery_cost_function <- function(sD,yeartime,nlag = 4.5){
#battery pack price model tuned to Kona and Leaf prices
#2020 premium
alpha<- dplyr::filter(sD,parameter=="learning_exponent")$value
b1 <-dplyr::filter(sD,parameter=="cost_floor")$value
b0 <- dplyr::filter(bnefprices, year==2020)$pack_ekWh-b1
#build learning curve from
if(yeartime >= 2020.5 + nlag) return(max(b1,b0*exp(-alpha*(yeartime-(2020.5+nlag))) + b1 ))
if(yeartime <= 2020.5 + nlag) return(stats::approx(x=bnefprices$year+0.5,y=bnefprices$pack_ekWh, xout=yeartime-nlag)$y)
#if(yeartime < 2021 & yeartime >= 2018) return( 264.7*(1+0.05)^(2021-yeartime))
#if(yeartime < 2018) return( 264.7*(1+0.15)^(2021-yeartime))
}
tech_cost_fun()
params$yeartime
tech_cost_fun <- function(type,tech_cost,kWh=NA,params){
dplyr::recode(type,
diesel = tech_cost,
petrol= tech_cost,
hev = tech_cost +kWh*(params$battery_cost- params$battery_cost_2021),
phev = tech_cost+kWh*(params$battery_cost- params$battery_cost_2021),
bev = ifelse(params$yeartime >= 2021, tech_cost + kWh*(params$battery_cost- params$battery_cost_2021), tech_cost)
)
}
load_all()
rm(list = c("battery_cost_function", "tech_cost_fun"))
load_all()
load_all()
get_current_tech(sD,2015) %>% filter(model=="Leaf")
battery_cost_function(sD,2015)
tech_cost_fun("bev",21000,kWh=20,params)
tech_cost_fun("bev",21000,kWh=24,params)
params$yeartime
tech_cost_fun("bev",10000,kWh=24,params)
params<- scenario_params(sD,2022)
tech_cost_fun("bev",10000,kWh=24,params)
get_current_tech <- function(sD, yeartime){
params <- scenario_params(sD,yeartime)
flag0 <- ifelse(yeartime >= 2021, "new","old")
fleet1 <- fleet %>% dplyr::select(c(-motor,-vrt,-`2021_rrp`,-`2021_rrp*`,-`comment`,-`kWh/100km`))
fleet1 <- fleet1 %>% dplyr::filter(yeartime >= model_start & yeartime < (model_end+1))
tech <- fleet1 %>% dplyr::rowwise() %>% dplyr::mutate(p_0=tech_cost_fun(type=type,tech_cost=tech_cost_2021,kWh=kWh,params) )
tech <- tech %>% dplyr::mutate(p_1=p_0*(1+params$car_vat)/(1-0.9*vrt_rate(WLTP,flag0)))
tech <- tech %>% dplyr::mutate(p_2 = p_1-incentives_fun(type,p_1,params,flag0,WLTP,new_used="new_car"))
#adjust fleet emissions & vehicle range
#use UF for
tech <- tech %>% dplyr::mutate(WLTP = params$fleet_factor*WLTP, AER=params$range_factor*AER)
return(dplyr::select(tech,make,model,segment,type,WLTP,kWh,AER,p_0,p_1,p_2))
}
get_current_tech(sD,2015) %>% filter(model=="Leaf")
get_current_tech(sD,2021) %>% filter(model=="Leaf")
get_current_tech(sD,2020) %>% filter(model=="Leaf")
get_current_tech(sD,2019) %>% filter(model=="Leaf")
get_current_tech(sD,2018) %>% filter(model=="Leaf")
get_current_tech(sD,2017) %>% filter(model=="Leaf")
get_current_tech(sD,2016) %>% filter(model=="Leaf")
get_current_tech(sD,2015) %>% filter(model=="Leaf")
get_current_tech(sD,2015) %>% filter(model==Zoe)
get_current_tech(sD,2015) %>% filter(model=="Zoe")
tech_cost_fun()
document()
rm(list = c("get_current_tech"))
document()
check()
install()
fleet <- readxl::read_xlsx("~/Policy/AgentBasedModels/PHEVs/survey_fleet.xlsx",sheet=6, range="A1:P342")
get_fleet_data <- function(fleet_dirty){
fleet <- fleet %>% dplyr::filter(!is.na(`2021_rrp`))
fleet$kWh <- as.numeric(fleet$kWh)
fleet <- fleet %>% dplyr::mutate(kWh=ifelse(!is.na(kWh),kWh,0))
fleet <- fleet %>% dplyr::mutate(model_start=replace(model_start,is.na(model_start),1990))
fleet <- fleet %>% dplyr::mutate(model_end= replace(model_end,is.na(model_end),3000))
ifelse(any(is.na(fleet$tech_cost_2021)),print("bad input"),print("good input"))
return(fleet)
}
fleet <- get_fleet_data(fleet)
library(tidyverse)
fleet <- get_fleet_data(fleet)
use_data(fleet,overwrite = T)
library(devtools)
use_data(fleet,overwrite = T)
install()
library(devtools)
scenario_1 <- readxl::read_xlsx("~/Policy/AgentBasedModels/PHEVs/scenarioDesignPHEV.xlsx",sheet=2)
use_data(scenario_1,overwrite=T)
scenario_1 <- readxl::read_xlsx("~/Policy/AgentBasedModels/PHEVs/scenarioDesignPHEV.xlsx",sheet=2)
load_all()
anxiety_fun(scenario_1,2023)
load_all()
rm(list = c("get_fleet_data"))
load_all()
anxiety_fun(scenario_1,2023)
anxiety_fun(scenario_1,2030)
anxiety_fun(scenario_1,2015)
document()
check()
install()
getBEVRange <- function(abm){
range <- abm[[1]] %>% filter(transaction) %>% group_by(simulation, date=y_zero+months(t-1),type) %>% summarise(`mean range`=mean(AER))
return(range)
}
library(devtools)
document()
rm(list = c("getBEVRange"))
document()
check()
document()
check()
install()
test <- rgamma(100-,shape=2.5,scale=50/2.5)
test <- rgamma(1000,shape=2.5,scale=50/2.5)
mean(test)
sd(test)
test <- rgamma(1000,shape=2.5,scale=50/2.5)
sd(test)
sd(test)
pgamma(seq(0,1,by=0.1),shape = 2.5,scale = 50/2.5)
pgamma(seq(0,200,by=1),shape = 2.5,scale = 50/2.5)
pgamma(seq(0,200,by=1),shape = 2.5,scale = 50/2.5) %>% plot()
library(tidyverse)
pgamma(seq(0,200,by=1),shape = 2.5,scale = 50/2.5) %>% plot()
dgamma(seq(0,200,by=1),shape = 2.5,scale = 50/2.5) %>% plot()
dgamma(seq(0,200,by=1),shape = 1.5,scale = 50/1.5) %>% plot()
dgamma(seq(0,200,by=1),shape = 1.,scale = 50/1.) %>% plot()
test <- rgamma(1000,shape=2.5,scale=50/2.5)
sd(test)/mean(test)
sd(test)/mean(test)*sqrt(2.5)
dgamma(seq(0,200,by=1),shape = 10.5,scale = 50/10.5) %>% plot()
sd(test)/mean(test)*sqrt(2.5)
dgamma(seq(0,200,by=1),shape = 10.5,scale = 50/10.5) %>% plot()
dgamma(seq(0,200,by=1),shape = 1.,scale = 50/1.) %>% plot()
library(devtools)
library(tidyverse)
grant_fun("phev",scenario_1,2022)
load_all()
grant_fun("phev",scenario_1,2022)
grant_fun("phev",scenario_1,2024)
stepfun(c(0,1),c(2,1,1.5))
plot(stepfun)
plot(sapply(seq(-1,5,by=0.1), stepfun))
stepfun(3)
stepfun(0.2)
stepfun(x=c(0,1),y=c(2,1,1.5))
stepfun(0.2)
f <- stepfun(x=c(0,1),y=c(2,1,1.5))
summary(f)
f <- stepfun(x=c(0,1),y=c(2,1,1.5),f=1)
summary(f)
f(2)
plot(sapply(seq(-1,5,by=0.1), stepfun))
plot(sapply(seq(-1,5,by=0.1), f))
f <- stepfun(x=c(-3,0,1),y=c(1,2,1,1.5),f=1)
plot(sapply(seq(-10,10,by=0.1), f))
f <- stepfun(x=c(-3,0,1),y=c(1,2,1,1.5),f=0)
plot(sapply(seq(-10,10,by=0.1), f))
plot(sapply(seq(-10,10,by=0.1), f),type="l")
f <- stepfun(x=c(-3,0,4),y=c(1,2,1,1.5),f=0)
plot(sapply(seq(-10,10,by=0.1), f),type="l")
#step from 0.5 to 0
grant_stepdown_2 <- dplyr::filter(sD, parameter == "phev_grant_phaseout_end")$value
yeartime <- 2022
stats::approx(x = c(grant_phaseout_start, grant_phaseout_end), y = c(1, 0.5,0), xout = yeartime, rule = 2,method="constant")$y
stats::approx(x = c(grant_stepdown_1, grant_stepdown_2), y = c(1, 0.5,0), xout = yeartime, rule = 2,method="constant")$y
#step from 1 to 0.5
grant_stepdown_1 <- dplyr::filter(sD, parameter == "phev_grant_phaseout_start")$value
#step from 0.5 to 0
grant_stepdown_2 <- dplyr::filter(sD, parameter == "phev_grant_phaseout_end")$value
grant_stepdown_1
grant_stepdown_2
stats::approx(x = c(grant_stepdown_1, grant_stepdown_2), y = c(1, 0.5,0), xout = yeartime, rule = 2,method="constant")$y
f <- stepfun(x=x = c(grant_stepdown_1, grant_stepdown_2), y = c(1, 0.5,0),f=0)
f <- stepfun(x=c(grant_stepdown_1, grant_stepdown_2), y = c(1, 0.5,0),f=0)
f
grant_fun1 <- function(type,sD,yeartime) {
# linear interp decay for SEAI grant
if(type=="bev"){
grant_phaseout_start <- dplyr::filter(sD, parameter == "bev_grant_phaseout_start")$value
grant_phaseout_end <- dplyr::filter(sD, parameter == "bev_grant_phaseout_end")$value
return(stats::approx(x = c(grant_phaseout_start, grant_phaseout_end), y = c(1, 0), xout = yeartime, rule = 2)$y)
}
if(type=="phev"){
#step from 1 to 0.5
grant_stepdown_1 <- dplyr::filter(sD, parameter == "phev_grant_phaseout_start")$value
#step from 0.5 to 0
grant_stepdown_2 <- dplyr::filter(sD, parameter == "phev_grant_phaseout_end")$value
f <- stats::stepfun(x=c(grant_stepdown_1, grant_stepdown_2), y = c(1, 0.5,0),f=0)
return(f(yeartime))
}
}
grant_fun1("phev",scenario_1,2023)
sapply(seq(2015,2030,by=0.1),grant_fun1("phev",scenario_1,y))
sapply(seq(2015,2030,by=0.1),funcyion(y) grant_fun1("phev",scenario_1,y))
sapply(seq(2015,2030,by=0.1),function(y) grant_fun1("phev",scenario_1,y))
sapply(seq(2015,2030,by=0.1),function(y) grant_fun1("phev",scenario_1,y)) %>% plot()
grant_fun1 <- function(type,sD,yeartime) {
# linear interp decay for SEAI grant
if(type=="bev"){
#steo from 1 to 0.5
grant_stepdown_1 <- dplyr::filter(sD, parameter == "bev_grant_phaseout_start")$value
#step from 0.5 to 0
grant_stepdown_2 <- dplyr::filter(sD, parameter == "bev_grant_phaseout_end")$value
f <- stats::stepfun(x=c(grant_stepdown_1, grant_stepdown_2), y = c(1, 0.5,0),f=0)
return(f(yeartime))  }
if(type=="phev"){
#step from 1 to 0.5
grant_stepdown_1 <- dplyr::filter(sD, parameter == "phev_grant_phaseout_start")$value
#step from 0.5 to 0
grant_stepdown_2 <- dplyr::filter(sD, parameter == "phev_grant_phaseout_end")$value
f <- stats::stepfun(x=c(grant_stepdown_1, grant_stepdown_2), y = c(1, 0.5,0),f=0)
return(f(yeartime))
}
}
sapply(seq(2015,2030,by=0.1),function(y) grant_fun1("bev",scenario_1,y)) %>% plot()
sapply(seq(2015,2030,by=0.1),function(y) grant_fun1("bev",scenario_1,y)) %>% plot()
grant_fun1 <- function(type,sD,yeartime) {
# linear interp decay for SEAI grant
if(type=="bev"){
#steo from 1 to 0.5
grant_stepdown_1 <- dplyr::filter(sD, parameter == "bev_grant_phaseout_start")$value
#step from 0.5 to 0
grant_stepdown_2 <- dplyr::filter(sD, parameter == "bev_grant_phaseout_end")$value
f <- stats::stepfun(x=c(grant_stepdown_1, grant_stepdown_2), y = c(1, 0.5,0),f=0)
return(f(yeartime))  }
if(type=="phev"){
#step from 1 to 0.5
grant_stepdown_1 <- dplyr::filter(sD, parameter == "phev_grant_phaseout_start")$value
#step from 0.5 to 0
grant_stepdown_2 <- dplyr::filter(sD, parameter == "phev_grant_phaseout_end")$value
f <- stats::stepfun(x=c(grant_stepdown_1, grant_stepdown_2), y = c(1, 0.5,0),f=0)
return(f(yeartime))
}
}
sapply(seq(2015,2030,by=0.1),function(y) grant_fun1("bev",scenario_1,y)) %>% plot()
#steo from 1 to 0.5
grant_stepdown_1 <- dplyr::filter(sD, parameter == "bev_grant_phaseout_start")$value
grant_stepdown_1
grant_stepdown_2
sD
dplyr::filter(sD, parameter=="lower_rebate_threshold")$value
diesel_price
load_all()
fuel_price_fun("diesel",sD,2030)
fuel_price_fun1("diesel",sD,2030)
fuel_price_fun1("petrol",sD,2030)
fuel_price_fun1("gasoline",sD,2030)
uf_model_wide <- read_csv("~/Policy/AgentBasedModels/PHEVs/phev_uf_model.csv")
uf_model_wide
uf_model_wide
use_data(uf_model_wide)
dim(uf_model_wide)
document()
rm(list = c("grant_fun1"))
document()
check()
install()
library(devtools)
document()
check()
insatll()
install()
document()
check()
install()
abm[[3]]
library(devtools)
document()
check()
install()
sD
abm
install()
library(devtools)
install()
library(devtools)
load_all()
file.in <- "~/Policy/AgentBasedModels/PHEVs/phev_grant_runs/abm_scenario_1_40runs_2022.5_phevgrant_phaseout_1.Rdata"
abm <- readRDS(file.in)
getIncentiveCost(abm) %>% filter(type=="phev")
getIncentiveCost(abm) %>% filter(type=="phev") %>% as_tibble()
library(tidyverse)
getIncentiveCost(abm) %>% filter(type=="phev") %>% as_tibble()
y_zero <- lubridate::ymd(paste(year_zero,1,1))
y_zerp
y_zero
y_zero+months(1:10)
y_zero+months(1:10-1)
load_all()
getIncentiveCost(abm) %>% filter(type=="phev") %>% as_tibble()
getIncentiveCost(abm) %>% filter(type=="phev",simulation==1) %>% as_tibble() %>% ggplot(aes(date,`incentive cost`)) + geom_point()
install()
ls()
rm(abm)
library(devtools)
uf_model_wide <- read_csv("~/Policy/AgentBasedModels/PHEVs/phev_uf_model.csv")
library(tidyverse)
uf_model_wide <- read_csv("~/Policy/AgentBasedModels/PHEVs/phev_uf_model.csv")
uf_model_wide
use_data(uf_model_wide,overwrite=T)
uf_model_wide %>% group_by(xi) %>% summarise(n=n())
document()
check()
install()
help("fleet")
library(devtools)
install.packages("pkgdown")
library(pkgdown)
use_readme_md(open = rlang::is_interactive())
pkgdown::build_site()
pkgdown::build_site()
install()
.libPaths()
install()
install()
install()
sessionInfo()
install()
install()
install()
install()
install()
install()
install.packages("data.table")
install.packages("data.table")
install()
install()
install()
install()
install()
install()
library(devtools)
install()
install()
library(pkgdown)
pkgdown::build_site()
help(budget_vals)
install()
docment()
document()
pkgdown::build_site()
install.packages("systemfonts")
pkgdown::build_site()
