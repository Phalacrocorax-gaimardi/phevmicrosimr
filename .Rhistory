type=="gasoline"~ dplyr::filter(sD, parameter=="excise_gasoline_2050")$value)
excise <- dplyr::case_when(type=="diesel"~stats::approx(c(lubridate::decimal_date(rev(fuelprices$date)),2031,2051),c(rev(fuelprices$dieselexcise),excise_2030,excise_2050),xout=yeartime,rule=2)$y,
type="gasoline"~stats::approx(c(lubridate::decimal_date(rev(fuelprices$date)),2031,2051),c(rev(fuelprices$petrolexcise),excise_2030,excise_2050),xout=yeartime,rule=2)$y,
)
return(excise)
return(stats::approx(x = c(2020, 2030, 2050), y = c(excise_2020, excise_2030, excise_2050), xout = yeartime, rule = 2)$y)
}
load_all()
rm(list = c("excise_duty_fun"))
excise_duty_fun("diesel",sD,2020)
rm(list = c("excise_duty_fun"))
excise_duty_fun("diesel",sD,2020)
excise_duty_fun("diesel",sD,2020)
excise_duty_fun("diesel",sD,2020)
excise_duty_fun("diesel",sD,2020)
type
#
excise_2030 <- dplyr::case_when(type=="diesel"~ dplyr::filter(sD, parameter=="excise_diesel_2030")$value,
type=="gasoline"~ dplyr::filter(sD, parameter=="excise_gasoline_2030")$value)
excise_2050 <- dplyr::case_when(type=="diesel"~ dplyr::filter(sD, parameter=="excise_diesel_2050")$value,
type=="gasoline"~ dplyr::filter(sD, parameter=="excise_gasoline_2050")$value)
excise <- dplyr::case_when(type=="diesel"~stats::approx(c(lubridate::decimal_date(rev(fuelprices$date)),2031,2051),c(rev(fuelprices$dieselexcise),excise_2030,excise_2050),xout=yeartime,rule=2)$y,
type="gasoline"~stats::approx(c(lubridate::decimal_date(rev(fuelprices$date)),2031,2051),c(rev(fuelprices$petrolexcise),excise_2030,excise_2050),xout=yeartime,rule=2)$y)
yeartime <- 2025
excise <- dplyr::case_when(type=="diesel"~stats::approx(c(lubridate::decimal_date(rev(fuelprices$date)),2031,2051),c(rev(fuelprices$dieselexcise),excise_2030,excise_2050),xout=yeartime,rule=2)$y,
type="gasoline"~stats::approx(c(lubridate::decimal_date(rev(fuelprices$date)),2031,2051),c(rev(fuelprices$petrolexcise),excise_2030,excise_2050),xout=yeartime,rule=2)$y)
load_all()
excise_duty_fun("diesel",sD,2020)
excise_duty_fun("gasoline",sD,2024.3)
excise_duty_fun("diesel",sD,2024.3)
df <- df %>% mutate(crackspread=crackspread_fun("diesel","sD",decimal_date(date)))
df <- df %>% mutate(dieselexcise=excise_duty_fun_fun("diesel",sD,decimal_date(date)))
df <- df %>% mutate(dieselexcise=excise_duty_fun("diesel",sD,decimal_date(date)))
df
df %>% ggplot(aes(date,dieselexcise)) + geom_line()
excise_2030 <- dplyr::case_when(type=="diesel"~ dplyr::filter(sD, parameter=="excise_diesel_2030")$value,
type=="gasoline"~ dplyr::filter(sD, parameter=="excise_gasoline_2030")$value)
excise_2050 <- dplyr::case_when(type=="diesel"~ dplyr::filter(sD, parameter=="excise_diesel_2050")$value,
type=="gasoline"~ dplyr::filter(sD, parameter=="excise_gasoline_2050")$value)
excise_2050
load_all()
df <- df %>% mutate(dieselexcise=excise_duty_fun("diesel",sD,decimal_date(date)))
load_all()
df <- df %>% mutate(dieselexcise=excise_duty_fun("diesel",sD,decimal_date(date)))
df <- df %>% mutate(dieselexcise=excise_duty_fun("diesel",sD,decimal_date(date))
df
df %>% ggplot(aes(date,dieselexcise)) + geom_line()
df <- df %>% mutate(dieselexcise=excise_duty_fun("diesel",sD,decimal_date(date))
)
#
excise_diesel_2030 <-  dplyr::filter(sD, parameter=="excise_diesel_2030")$value
excise_gasoline_2020 <- dplyr::filter(sD, parameter=="excise_gasoline_2030")$value
excise_diesel_2050 <- dplyr::filter(sD, parameter=="excise_diesel_2050")$value
excise_gasoline_2050 <- dplyr::filter(sD, parameter=="excise_gasoline_2050")$value
excise <- dplyr::case_when(type=="diesel"~stats::approx(c(lubridate::decimal_date(rev(fuelprices$date)),2031,2051),c(rev(fuelprices$dieselexcise),excise_diesel_2030,excise_diesel_2050),xout=yeartime,rule=2)$y,
type=="gasoline"~stats::approx(c(lubridate::decimal_date(rev(fuelprices$date)),2031,2051),c(rev(fuelprices$petrolexcise),excise_gasoline_2030,excise_gasoline_2050),xout=yeartime,rule=2)$y)
load_all()
df <- df %>% mutate(dieselexcise=excise_duty_fun("diesel",sD,decimal_date(date)))
load_all()
df <- df %>% mutate(dieselexcise=excise_duty_fun("diesel",sD,decimal_date(date)))
df
df %>% ggplot(aes(date,dieselexcise)) + geom_line()
dev.new()
dev.new()
df %>% ggplot(aes(date,dieselexcise)) + geom_line()
yeartime <- 2050
#
excise_diesel_2030 <-  dplyr::filter(sD, parameter=="excise_diesel_2030")$value
excise_gasoline_2030 <- dplyr::filter(sD, parameter=="excise_gasoline_2030")$value
excise_diesel_2050 <- dplyr::filter(sD, parameter=="excise_diesel_2050")$value
excise_gasoline_2050 <- dplyr::filter(sD, parameter=="excise_gasoline_2050")$value
excise_gasoline_2030
excise_gasoline_2050
type
yeartime
yeartime <- 2030
excise_diesel_2030 <-  dplyr::filter(sD, parameter=="excise_diesel_2030")$value
excise_gasoline_2030 <- dplyr::filter(sD, parameter=="excise_gasoline_2030")$value
excise_diesel_2050 <- dplyr::filter(sD, parameter=="excise_diesel_2050")$value
excise_gasoline_2050 <- dplyr::filter(sD, parameter=="excise_gasoline_2050")$value
excise <- dplyr::case_when(type=="diesel"~stats::approx(c(lubridate::decimal_date(rev(fuelprices$date)),2031,2051),c(rev(fuelprices$dieselexcise),excise_diesel_2030,excise_diesel_2050),xout=yeartime,rule=2)$y,
type=="gasoline"~stats::approx(c(lubridate::decimal_date(rev(fuelprices$date)),2031,2051),c(rev(fuelprices$petrolexcise),excise_gasoline_2030,excise_gasoline_2050),xout=yeartime,rule=2)$y)
excise
excise_gasoline_2030
excise
fuelprices
fuelprices %<% tail()
fuelprices %>% tail()
#
excise_diesel_2030 <-  dplyr::filter(sD, parameter=="excise_diesel_2030")$value
excise_gasoline_2030 <- dplyr::filter(sD, parameter=="excise_gasoline_2030")$value
excise_diesel_2050 <- dplyr::filter(sD, parameter=="excise_diesel_2050")$value
excise_gasoline_2050 <- dplyr::filter(sD, parameter=="excise_gasoline_2050")$value
excise <- dplyr::case_when(type=="diesel"~stats::approx(c(lubridate::decimal_date(rev(fuelprices$date)),2031,2051),c(rev(fuelprices$dieselexcise),excise_diesel_2030,excise_diesel_2050),xout=yeartime,rule=2)$y,
type=="gasoline"~stats::approx(c(lubridate::decimal_date(rev(fuelprices$date)),2031,2051),c(rev(fuelprices$petrolexcise),excise_gasoline_2030,excise_gasoline_2050),xout=yeartime,rule=2)$y)
excise
type <- "gasoline"
excise <- dplyr::case_when(type=="diesel"~stats::approx(c(lubridate::decimal_date(rev(fuelprices$date)),2031,2051),c(rev(fuelprices$dieselexcise),excise_diesel_2030,excise_diesel_2050),xout=yeartime,rule=2)$y,
type=="gasoline"~stats::approx(c(lubridate::decimal_date(rev(fuelprices$date)),2031,2051),c(rev(fuelprices$petrolexcise),excise_gasoline_2030,excise_gasoline_2050),xout=yeartime,rule=2)$y)
excise
fuelprices
plot(c(lubridate::decimal_date(rev(fuelprices$date)),2031,2051),c(rev(fuelprices$dieselexcise),excise_diesel_2030,excise_diesel_2050)
plot(c(lubridate::decimal_date(rev(fuelprices$date)),2031,2051),c(rev(fuelprices$dieselexcise),excise_diesel_2030,excise_diesel_2050))
excise_diesel_2050
load_all()
fuelprices
df %>% ggplot(aes(date,dieselexcise)) + geom_line()
df
df
df
df <- df %>% mutate(dieselexcise=excise_duty_fun("diesel",sD,decimal_date(date)))
df
df %>% ggplot(aes(date,dieselexcise)) + geom_line()
df <- df %>% mutate(dieselprice=fuel_price_fun1("diesel",sD,decimal_date(date)))
load_all()
df <- df %>% mutate(dieselprice=fuel_price_fun1("diesel",sD,decimal_date(date)))
fuel_price_fun1("diesel",sD,2025)
fuel_price_fun1("diesel",sD,2035)
fuel_price_fun1("diesel",sD,2022)
crackspread_fun("diesel",sD,2025)
crackspread_fun("diesel",sD,2025)
fuel_price_fun1("diesel",sD,2022)
df <- df %>% mutate(dieselprice=fuel_price_fun1("diesel",sD,decimal_date(date)))
df
df %>% ggplot(aes(year,dieselprice)) + geom_line()
df
df %>% tail()
df <- df %>% mutate(dieselprice=fuel_price_fun1("diesel",sD,decimal_date(date)))
df[1:10,] %>% mutate(dieselprice=fuel_price_fun1("diesel",sD,decimal_date(date)))
df[1:10,] %>% mutate(dieselprice=fuel_price_fun1("diesel",sD,decimal_date(date))))
df[1:10,] %>% mutate(dieselprice=fuel_price_fun1("diesel",sD,decimal_date(date)))
df[1:10,]
fuel_price_fun1("diesel",sD,decimal_date("2005-01-01")))
fuel_price_fun1("diesel",sD,decimal_date("2005-01-01"))
fuel_price_fun1("diesel",sD,decimal_date(ymd("2005-01-01")))
fuel_price_fun1("diesel",sD,decimal_date(ymd("2005-01-01")))
decimal_date(ymd("2005-01-01"))
fuel_price_fun1("diesel",sD,2020)
fuel_price_fun1("diesel",sD,2010)
oil_price_fun(2010)
oil_price_fun(sD,2010)
crackspread_fun("diesel",sD,2010)
carbon_tax_fun(sD,2010)
load_all()
carbon_tax_fun(sD,2010)
load_all()
carbon_tax_fun(sD,2010)
load_all()
carbon_tax_fun(sD,2010)
carbon_tax_fun(sD,2012)
carbon_tax_fun(sD,2011)
carbon_tax_fun(sD,2013)
carbon_tax_fun(sD,2014)
carbon_tax_fun(sD,2015)
length(0:9)
load_all()
carbon_tax_fun(2010)
carbon_tax_fun(sD,2010)
carbon_tax_fun(sD,2010.5)
fuel_price_fun1("diesel",sD,decimal_date(ymd("2005-01-01")))
df <- df %>% mutate(dieselprice=fuel_price_fun1("diesel",sD,decimal_date(date)))
df
df %>% ggplot(aes(time,dieselprice)) + geom_line()
df
df %>% ggplot(aes(date(),dieselprice)) + geom_line()
df %>% ggplot(aes(date,dieselprice)) + geom_line()
df
df %>% tail()
df %>% filter(year(date)==2025)
carbon_tax_fun()
carbon_tax_fun
date_decimal(2010+5/12)
date_decimal(2010+4/12)
df %>% ggplot(aes(date,dieselprice)) + geom_line() + geom_line(data=fuelprices, aes(date,dieselprice),colour="green")
fuelprices
df %>% ggplot(aes(date,dieselprice)) + geom_line() + geom_line(data=fuelprices, aes(date,diesel),colour="green")
df %>% ggplot(aes(date,dieselprice)) + geom_line() + geom_line(data=fuelprices, aes(date,diesel/100),colour="green")
fuel_price_fun()
fuel_price_fun
fuelprices
load_all()
document()
document()
check()
load_all()
document()
check()
load_all()
document()
check()
fuelcost_fun("diesel",120,0,0,scenario_params(scenario_1,2025.5),0)
fuelcost_fun("diesel",120,0,0,scenario_params(sD,2025.5),0)
scenario_B <- sD
use_data(scenario_B)
scenario_B
electricity_price_fun(scenario_B,2029)
oil_price_fun(scenario_B,2023)
crackspread_fun("diesel",scenario_B,2025)
fuel_price_fun1("gasoline",scenario_B,2025)
bev_fuelcost(scenario_B,2030)
conversion_fun(scenario_B,2026.5)
anxiety_fun(scenario_B,2023)
anxiety_fun(scenario_B,2028)
load_all()
document()
check()
excise_duty_fun("gasoline",scenario_B,2030)
load_all()
check()
load_all()
document()
check()
scenario_B
load_all()
document()
check()
society
help(society)
help(society-data)
society-data
names(society)
load_all()
createArtificalSociety(society,homophily = 4.5)
createArtificalSociety(society,homophily, nu=4.5)
test <- createArtificalSociety(society,homophily, nu=4.5)
test %>% filter(from==10)
test
str(test)
test
ggraph::ggraph(test)
test
ggraph::ggraph(test) + ggraph::geom_node_point()
ggraph::ggraph(test,layput='fr') + ggraph::geom_node_point()
ggraph::ggraph(test,layout='fr') + ggraph::geom_node_point()
ggraph::ggraph(test,layout='fr') + ggraph::geom_node_point() + ggraph::geom_edge_link()
test_sub <- to_subgraph(test, id %in 10, subset_by="nodes")$subgraph
test_sub <- to_subgraph(test, id %in% 10, subset_by="nodes")$subgraph
test_sub <- tidygraph::to_subgraph(test, id %in% 10, subset_by="nodes")$subgraph
test
test_sub <- tidygraph::to_subgraph(test, ID %in% 10, subset_by="nodes")$subgraph
test_sub
test_sub <- tidygraph::to_subgraph(test, ID %in% 100, subset_by="nodes")$subgraph
test_sub
test %>% filter(ID == 100)
morph(test) %>% filter(ID == 100)
ggraph::morph(test) %>% filter(ID == 100)
tidygraph::morph(test) %>% filter(ID == 100)
tidygraph::morph(test, ID==3)
test %>% node_is_adjacebt(10)
test %>% node_is_adjacent(10)
test %>% tidygraph::node_is_adjacent(10)
test %>% mutate(tidygraph::node_is_adjacent(10))
test %>% mutate(adj,tidygraph::node_is_adjacent(10)) %>% filter(adj)
test %>% mutate(adj=tidygraph::node_is_adjacent(10)) %>% filter(adj)
test
test %>% fiter(ID==10)
test %>% filter(ID==10)
test %>% mutate(adj=tidygraph::node_is_adjacent(10)) %>% filter(adj)
test %>% mutate(adj=tidygraph::node_is_adjacent(20)) %>% filter(adj)
test %>% mutate(adj=tidygraph::node_is_adjacent(20)) %>% filter(adj) %>% ggraph::ggraph()
ggraph::ggraph(test,layout='fr') + ggraph::geom_node_point() + ggraph::geom_edge_link()
test %>% mutate(adj=tidygraph::node_is_adjacent(20)) %>% filter(adj) %>% ggraph::ggraph(layout='fr') + ggraph::geom_node_point() + ggraph::geom_edge_link()
test %>% mutate(adj=tidygraph::node_is_adjacent(10)) %>% filter(adj) %>% ggraph::ggraph(layout='fr') + ggraph::geom_node_point() + ggraph::geom_edge_link()
check()
society
dim(society)
society$employment_status %>% unique()
society
load_all()
document()
check()
load_all()
document()
check()
load_all()
document()
check()
test <- runABM(scenario_B,1,simulation_end=2025,resample_society = T,use_parallel = F)
get_newtech_2021(scenario_B,2024.5)
get_newtech_2022(scenario_B,2024.5)
get_newtecg(scenario_B,2024.3)
get_newtech(scenario_B,2024.3)
get_used_tech(scenario_B,2024.5,4)
sD <- scenario_B
simulation_end <- 2025
resample_society <- T
n_unused_cores=2
use_parallel=T
#
year_zero <- 2015
Nt <- round((simulation_end-year_zero+1)*12)
#comment out net line for parallel
#abm <- tibble::tibble()
#comment in next two lines for parallel
if(use_parallel){
number_of_cores <- parallel::detectCores() - n_unused_cores
doParallel::registerDoParallel(number_of_cores)
#comment out next line for parallel
#for(j in 1:Nrun){
#comment in next line for parallel
abm <- foreach::foreach(j = 1:Nrun, .combine=dplyr::bind_rows,.export = c("initialise_segments","update_agents4")) %dopar% {
#create a new artificial society for each run
print(paste("Generating network for run",j,"...."))
if(!resample_society) social <- phevmicrosimr::createArtificalSociety(society,homophily,4.5)
if(resample_society){
agent_resample <- sample(1:924,replace=T)
society_new <- society[agent_resample,]
society_new$ID <- 1:924
social <- createArtificalSociety(society_new,homophily,4.5)
}
#randomiise ICEV emissions assignment
#choose segments
agents_in <- initialise_segments(sD)
#no transactions
agents_in$transaction <- FALSE
#fraction of drivers who are uncer
r_new <- dplyr::filter(sD,parameter=="r_new")$value
agents_in <- agents_in %>% dplyr::rowwise() %>% dplyr::mutate(qev31 = replace(qev31, qev31==3, sample(c(1,2),1,prob=c(r_new,1-r_new))))
agents_in <- dplyr::ungroup(agents_in)
agent_ts<- vector("list",Nt)
agent_ts[[1]] <- agents_in #agent paraneters with regularized weights
for(t in seq(2,Nt)){
#
yeartime <- year_zero+(t-1)/12
agent_ts[[t]] <- update_agents4(sD,yeartime,agent_ts[[t-1]],social_network=social) #static social network, everything else static
#agent_ts[[t]] <- tibble::tibble(t=t)
}
for(t in 1:Nt) agent_ts[[t]]$t <- t
agent_ts <- tibble::as_tibble(data.table::rbindlist(agent_ts,fill=T))
agent_ts$simulation <- j
#comment out next line for parallel
#abm <- dplyr::bind_rows(abm,agent_ts)
#comment in next line for parallel
agent_ts
}
meta <- tibble::tibble(parameter=c("Nrun","end_year","beta.","lambda.","A_bat","B_bat","M_bat","p.","wltp_nedc_ratio"),value=c(Nrun,end_year,beta.,lambda.,A_bat,B_bat,M_bat,p.,wltp_nedc_ratio))
return(list("abm"=abm,"scenario"=sD,"system"=meta))
}
Nrun <- 1
if(!use_parallel){
abm<- tibble::tibble()
#number_of_cores <- parallel::detectCores() - n_unused_cores
#doParallel::registerDoParallel(number_of_cores)
#comment out next line for parallel
for(j in 1:Nrun){
#comment in next line for parallel
#abm <- foreach::foreach(j = 1:Nrun, .combine=dplyr::bind_rows,.export = c("initialise_segments","update_agents4")) %dopar% {
#create a new artificial society for each run
print(paste("Generating network for run",j,"...."))
if(!resample_society) social <- createArtificalSociety(society,homophily,4.5)
if(resample_society){
agent_resample <- sample(1:924,replace=T)
society_new <- society[agent_resample,]
society_new$ID <- 1:924
social <- phevmicrosimr::createArtificalSociety(society_new,homophily,4.5)
}
#randomise ICEV emissions assignment
#choose market segment for each agent
agents_in <- initialise_segments(sD)
#no transactions
agents_in$transaction <- FALSE
#fraction of agents who are uncertain who buy a new car
r_new <- dplyr::filter(sD,parameter=="r_new")$value
agents_in <- agents_in %>% dplyr::rowwise() %>% dplyr::mutate(qev31 = replace(qev31, qev31==3, sample(c(1,2),1,prob=c(r_new,1-r_new))))
agents_in <- dplyr::ungroup(agents_in)
agent_ts<- vector("list",Nt)
agent_ts[[1]] <- agents_in #agent paraneters with regularized weights
for(t in seq(2,Nt)){
#
yeartime <- year_zero+(t-1)/12
agent_ts[[t]] <- update_agents4(sD,yeartime,agent_ts[[t-1]],social_network=social) #static social network, everything else static
#agent_ts[[t]] <- tibble::tibble(t=t)
}
for(t in 1:Nt) agent_ts[[t]]$t <- t
agent_ts <- tibble::as_tibble(data.table::rbindlist(agent_ts,fill=T))
agent_ts$simulation <- j
#comment out next line for parallel
abm <- dplyr::bind_rows(abm,agent_ts)
#comment in next line for parallel
#agent_ts
}
meta <- tibble::tibble(parameter=c("Nrun","end_year","beta.","lambda.","A_bat","B_bat","M_bat","p.","wltp_nedc_ratio"),value=c(Nrun,end_year,beta.,lambda.,A_bat,B_bat,M_bat,p.,wltp_nedc_ratio))
return(list("abm"=abm,"scenario"=sD,"system"=meta))
}
abm<- tibble::tibble()
for(j in 1:Nrun){
#comment in next line for parallel
#abm <- foreach::foreach(j = 1:Nrun, .combine=dplyr::bind_rows,.export = c("initialise_segments","update_agents4")) %dopar% {
#create a new artificial society for each run
print(paste("Generating network for run",j,"...."))
if(!resample_society) social <- createArtificalSociety(society,homophily,4.5)
if(resample_society){
agent_resample <- sample(1:924,replace=T)
society_new <- society[agent_resample,]
society_new$ID <- 1:924
social <- phevmicrosimr::createArtificalSociety(society_new,homophily,4.5)
}
#randomise ICEV emissions assignment
#choose market segment for each agent
agents_in <- initialise_segments(sD)
#no transactions
agents_in$transaction <- FALSE
#fraction of agents who are uncertain who buy a new car
r_new <- dplyr::filter(sD,parameter=="r_new")$value
agents_in <- agents_in %>% dplyr::rowwise() %>% dplyr::mutate(qev31 = replace(qev31, qev31==3, sample(c(1,2),1,prob=c(r_new,1-r_new))))
agents_in <- dplyr::ungroup(agents_in)
agent_ts<- vector("list",Nt)
agent_ts[[1]] <- agents_in #agent paraneters with regularized weights
for(t in seq(2,Nt)){
#
yeartime <- year_zero+(t-1)/12
agent_ts[[t]] <- update_agents4(sD,yeartime,agent_ts[[t-1]],social_network=social) #static social network, everything else static
#agent_ts[[t]] <- tibble::tibble(t=t)
}
for(t in 1:Nt) agent_ts[[t]]$t <- t
agent_ts <- tibble::as_tibble(data.table::rbindlist(agent_ts,fill=T))
agent_ts$simulation <- j
#comment out next line for parallel
abm <- dplyr::bind_rows(abm,agent_ts)
#comment in next line for parallel
#agent_ts
}
meta <- tibble::tibble(parameter=c("Nrun","end_year","beta.","lambda.","A_bat","B_bat","M_bat","p.","wltp_nedc_ratio"),value=c(Nrun,end_year,beta.,lambda.,A_bat,B_bat,M_bat,p.,wltp_nedc_ratio))
return(list("abm"=abm,"scenario"=sD,"system"=meta))
}
}
j
t
yeartime
update_agents4(sD,yeartime,agent_ts[[t-1]],social_network=social) #static social network, everything else static
agents_ts[[t-1]]
agents_ts
update_agents4(scenario_B,agents_in,social)
update_agents4(scenario_B,yeartime,agents_in,social)
sD <- scenario_B
social_network <- social
dU_enviro <- dplyr::filter(util_empirical,name=="q17a_2")$shap
dU_social <- dplyr::filter(util_empirical,name=="qev29")$shap
#lambda. <- 0.12
a_s <- agents_in
a_s$transaction <- F
a_s <- dplyr::ungroup(a_s)
#parameters from scenario corresponding to yeartime
params <- scenario_params(sD,yeartime) #enviroment object
tco_term <- params$tco_term
#depreciation vector over 3-year (for TCO)
deprc_vals <- list("petrol"=(1-params$deprec_0)^tco_term,
"diesel"=(1-params$deprec_diesel)^tco_term,
"hev"=(1-params$deprec_hev)^tco_term,
"phev"=(1-params$deprec_phev)^tco_term,
"bev" = (1-params$deprec_bev)^tco_term
)
depr_ev <- (1-params$deprec_ev)^tco_term
depr <- (1-params$deprec_0)^tco_term
flag <- flagr(yeartime) #whether to use old, 2021 or new budget 2022 tax bands
#current fleet parameters
new_tech <- get_newtech(sD,yeartime)
#4 year old vehicles
used_car_age_fun <- function(){
age_0 <- 2015-mean(agents_init$reg)
#f_new <- dim(filter(agents_init,qev31==1))[1]/924 #fraction with
f_new <- 287/924
# a_{t+1} = (a_{t}+1/12)(1-M_{rep}/N_f) + a M_{used}/N_f
(age_0 - (age_0+1/12)*(1-15/924))/((1-f_new)*15/924)
}
used_car_age <- used_car_age_fun() - 0.75 #apply 9 month adjustment
used_tech <- get_used_tech(sD,yeartime,vehicle_age = used_car_age)
used_car_age
#used cars are assumed to be imported
params <- scenario_params(sD,yeartime) #parameters taken at yeartime
params_old <- scenario_params(sD,yeartime-vehicle_age) #technical parameters when vehicle was new
vehicle_age <- used_car_age
#used cars are assumed to be imported
params <- scenario_params(sD,yeartime) #parameters taken at yeartime
params_old <- scenario_params(sD,yeartime-vehicle_age) #technical parameters when vehicle was new
yeartime-vehicle_age
update_agents4(scenario_B,yeartime,agents_in,social)
load_all()
document()
check()
test <- runABM(scenario_B,1,simulation_end=2025,resample_society = T,use_parallel = F)
test <- runABM(scenario_B,40,simulation_end=2030,resample_society = T,use_parallel = T)
society
test <- runABM(scenario_B,40,simulation_end=2030,resample_society = T,use_parallel = T)
phevmicrosimr::createArtificalSociety(society,homophily,4.5)
agent_resample <- sample(1:924,replace=T)
society[agent_resample,]
test <- runABM(scenario_B,40,simulation_end=2030,resample_society = F,use_parallel = T)
help(runABM)
load_all()
phevmicrosimr::createArtificalSociety(society,homophily,4.5)
help(createArtificalSociety)
load_all()
document()
check()
test <- runABM(scenario_B,40,simulation_end=2030,resample_society = F,use_parallel = T)
test <- runABM(scenario_B,40,simulation_end=2030,resample_society = F,use_parallel = F)
install()
library(devtools)
load_all()
document()
check()
install()
library(devtools)
load_all()
check()
install()
install()
load_all()
library(devtools)
check()
install()
